import subprocess
import sys
import time

def scan_networks():
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ Wi-Fi —Å–µ—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ SSID"""
    if sys.platform.startswith("linux"):
        result = subprocess.run(
            ["nmcli", "-t", "-f", "SSID", "dev", "wifi"],
            capture_output=True, text=True
        )
        networks = [line.strip() for line in result.stdout.splitlines() if line.strip()]
    
    elif sys.platform.startswith("win"):
        print("üîç –°–∫–∞–Ω–∏—Ä—É–µ–º —Å–µ—Ç–∏ Wi-Fi...")
        try:
            # –ü–µ—Ä–≤—ã–π —Å–ø–æ—Å–æ–± - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            result = subprocess.run(
                ["netsh", "wlan", "show", "networks"],
                capture_output=True, text=True, encoding='cp866', timeout=30
            )
            
            networks = []
            for line in result.stdout.splitlines():
                line = line.strip()
                if line.startswith("SSID") and "BSSID" not in line:
                    parts = line.split(':', 1)
                    if len(parts) > 1:
                        ssid = parts[1].strip()
                        if ssid and ssid not in networks:
                            networks.append(ssid)
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–µ—Ç—å, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            if not networks:
                print("–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
                networks = scan_networks_alternative()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            networks = []
    
    else:
        print("‚ùå Unsupported OS.")
        networks = []
    
    return networks

def scan_networks_alternative():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Windows"""
    try:
        result = subprocess.run(
            ["netsh", "wlan", "show", "all"],
            capture_output=True, text=True, encoding='cp866', timeout=30
        )
        
        networks = []
        in_network_section = False
        
        for line in result.stdout.splitlines():
            line = line.strip()
            if "–°–µ—Ç–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" in line or "Network parameters" in line:
                in_network_section = True
            elif line.startswith("====") and in_network_section:
                in_network_section = False
            elif in_network_section and "SSID" in line and "BSSID" not in line:
                parts = line.split(':', 1)
                if len(parts) > 1:
                    ssid = parts[1].strip()
                    if ssid and ssid not in networks:
                        networks.append(ssid)
        
        return networks
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return []

def check_specific_network(target_ssid="karch_eeg_88005553535"):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Ç–∏"""
    print(f"üîé –ò—â–µ–º —Å–µ—Ç—å: '{target_ssid}'")
    networks = scan_networks()
    
    print(f"üì∂ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ç–µ–π: {len(networks)}")
    for i, network in enumerate(networks, 1):
        print(f"   {i}. '{network}'")
    
    if target_ssid in networks:
        print(f"‚úÖ –°–ï–¢–¨ '{target_ssid}' –ù–ê–ô–î–ï–ù–ê!")
        return True
    else:
        print(f"‚ùå –°–ï–¢–¨ '{target_ssid}' –ù–ï –ù–ê–ô–î–ï–ù–ê!")
        return False

def test_wifi_adapter():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ Wi-Fi –∞–¥–∞–ø—Ç–µ—Ä–∞"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä—è–µ–º Wi-Fi –∞–¥–∞–ø—Ç–µ—Ä...")
    try:
        result = subprocess.run(
            ["netsh", "wlan", "show", "interfaces"],
            capture_output=True, text=True, encoding='cp866'
        )
        print("–°–æ—Å—Ç–æ—è–Ω–∏–µ Wi-Fi –∞–¥–∞–ø—Ç–µ—Ä–∞:")
        for line in result.stdout.splitlines()[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
            print(f"   {line.strip()}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞: {e}")

def continuous_scan(target_ssid="karch_eeg_88005553535", max_attempts=20, delay=5):
    """–ü–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç —Å–µ—Ç–∏ –≤ –ø–æ–∏—Å–∫–∞—Ö —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ç–∏"""
    print(f"\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å–µ—Ç–∏ '{target_ssid}'")
    print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {delay} —Å–µ–∫—É–Ω–¥")
    print(f"üî¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {max_attempts}")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
    
    found = False
    attempt = 0
    
    while attempt < max_attempts and not found:
        attempt += 1
        print(f"\n--- –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts} ---")
        
        try:
            found = check_specific_network(target_ssid)
            
            if found:
                print(f"\nüéâ –£–°–ü–ï–•! –°–µ—Ç—å '{target_ssid}' –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}!")
                break
            else:
                if attempt < max_attempts:
                    print(f"‚è≥ –ñ–¥–µ–º {delay} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏...")
                    time.sleep(delay)
                else:
                    print(f"\nüí• –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ ({max_attempts})")
                    
        except KeyboardInterrupt:
            print(f"\n‚èπÔ∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ—Å–ª–µ {attempt} –ø–æ–ø—ã—Ç–æ–∫")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            if attempt < max_attempts:
                print(f"‚è≥ –ñ–¥–µ–º {delay} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏...")
                time.sleep(delay)
    
    return found

def quick_connect_test(target_ssid="karch_eeg_88005553535"):
    """–ë—ã—Å—Ç—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
    if check_specific_network(target_ssid):
        print(f"\nüîó –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ç–∏ '{target_ssid}'...")
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ç–∏ (–¥–ª—è Windows)
            if sys.platform.startswith("win"):
                result = subprocess.run(
                    ["netsh", "wlan", "connect", f"name={target_ssid}"],
                    capture_output=True, text=True, encoding='cp866'
                )
                if result.returncode == 0:
                    print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    print("=== –ù–ï–ü–†–ï–†–´–í–ù–´–ô –°–ö–ê–ù–ï–† WI-FI –°–ï–¢–ï–ô ===\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Wi-Fi –∞–¥–∞–ø—Ç–µ—Ä
    test_wifi_adapter()
    
    print("\n" + "="*50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–æ–∏—Å–∫
    target_network = "karch_eeg_88005553535"
    found = continuous_scan(target_network, max_attempts=20, delay=5)
    
    if found:
        print("\n" + "="*50)
        print("üéØ –°–ï–¢–¨ –ù–ê–ô–î–ï–ù–ê! –î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        print("1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ç–∏ 'karch_eeg_88005553535' —Å –ø–∞—Ä–æ–ª–µ–º '12345678'")
        print("2. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: 192.168.4.1")
        print("3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Python-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—Ä—Ç—É 8888")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –±—ã—Å—Ç—Ä—É—é –ø–æ–ø—ã—Ç–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        response = input("\n–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è? (y/n): ")
        if response.lower() in ['y', 'yes', '–¥', '–¥–∞']:
            quick_connect_test(target_network)
    else:
        print("\n" + "="*50)
        print("üí° –°–û–í–ï–¢–´ –ü–û –†–ï–®–ï–ù–ò–Æ –ü–†–û–ë–õ–ï–ú:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ESP32 –≤–∫–ª—é—á–µ–Ω–∞ –∏ –º–∏–≥–∞–µ—Ç —Å–≤–µ—Ç–æ–¥–∏–æ–¥")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –Ω–∞ ESP32 –∑–∞–ø—É—â–µ–Ω –∫–æ–¥ —Å WiFi.softAP()")
        print("3. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ ESP32")
        print("4. –ü–æ–¥–Ω–µ—Å–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä –±–ª–∏–∂–µ –∫ ESP32")
        print("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∏—Ç–∞–Ω–∏–µ ESP32")
        print("6. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ç–∏ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        print("7. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Wi-Fi –∞–¥–∞–ø—Ç–µ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω")
    
    print("\n" + "="*50)
    print("üìù –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"–¶–µ–ª–µ–≤–∞—è —Å–µ—Ç—å: {target_network}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'–ù–ê–ô–î–ï–ù–ê' if found else '–ù–ï –ù–ê–ô–î–ï–ù–ê'}")